OBJECT Codeunit 86401 REG Registration Class
{
  OBJECT-PROPERTIES
  {
    Date=01/03/17;
    Time=12:55:45;
    Modified=Yes;
    Version List=HelloWorld;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      IsInitialized@86400 : Boolean;
      CurrentAppId@86401 : GUID;
      CurrentRegHostUrl@86402 : Text;
      CurrentLevel@86403 : Integer;
      CurrentNotificationMsg@86404 : Text;
      ErrorWebService@86405 : TextConst 'ENU=An error occurred on checking your app registration. Please contact your vendor for more information.';
      CurrentRedirectUrl@86407 : Text;
      CurrentNotificationActionText@86408 : Text;

    PROCEDURE CheckCurrentAccessLevel@86400(AppID@86400 : GUID;RegHostUrl@86403 : Text;RequiredAccessLevel@86401 : Integer;ShowNotification@86402 : Boolean) : Boolean;
    BEGIN
      AssertInitialized(AppID, RegHostUrl);

      IF RequiredAccessLevel > CurrentLevel THEN BEGIN
        IF ShowNotification AND GUIALLOWED THEN
          HandleNotificationOnCheck(AppID, CurrentNotificationMsg,CurrentNotificationActionText,CurrentRedirectUrl);

        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AssertInitialized@86401(VAR AppID@86401 : GUID;VAR RegHostUrl@86400 : Text);
    BEGIN
      IF CurrentAppId <> AppID THEN IsInitialized := FALSE;
      IF CurrentRegHostUrl <> RegHostUrl THEN IsInitialized := FALSE;

      CurrentAppId := AppID;
      CurrentRegHostUrl := RegHostUrl;

      IF NOT IsInitialized THEN
        Initialize;

      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE Initialize@86402();
    VAR
      Url@90000 : Text;
      Json@90006 : Text;
      HttpWebRequestMgt@90001 : Codeunit 1297;
      TempBlob@90002 : Record 99008535;
      Instr@90003 : InStream;
      HttpStatusCode@90005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeaders@90004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      JObject@90007 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";
      REGAccessLevelEnum@86400 : Codeunit 86402;
    BEGIN
      Url := GetCheckRegistrationLink;

      HttpWebRequestMgt.Initialize(Url);
      HttpWebRequestMgt.DisableUI;
      HttpWebRequestMgt.SetMethod('GET');
      HttpWebRequestMgt.SetReturnType('application/json');

      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(Instr);

      CurrentLevel := REGAccessLevelEnum.FullAccess;
      CurrentNotificationMsg := '';

      IF HttpWebRequestMgt.GetResponse(Instr,HttpStatusCode,ResponseHeaders) THEN BEGIN
        IF HttpStatusCode.ToString = HttpStatusCode.OK.ToString THEN BEGIN
          Json := TempBlob.ReadAsText('',TEXTENCODING::UTF8);
          JObject := JObject.Parse(Json);
          EVALUATE(CurrentLevel,JObject.GetValue('accessLevel').ToString);
          CurrentNotificationMsg := JObject.GetValue('notificationMessage').ToString;
          CurrentRedirectUrl := JObject.GetValue('redirectUrl').ToString;
          CurrentNotificationActionText := JObject.GetValue('notificationActionText').ToString;
        END ELSE
          CurrentNotificationMsg := ErrorWebService;
      END ELSE
        CurrentNotificationMsg := ErrorWebService;
    END;

    LOCAL PROCEDURE GetCheckRegistrationLink@86403() ReturnValue : Text;
    VAR
      AppRegHost@86400 : Text;
    BEGIN
      ReturnValue := CurrentRegHostUrl + GetAppCheckRegPath + GetAppRegParameters;
    END;

    LOCAL PROCEDURE GetAppCheckRegPath@86404() : Text;
    BEGIN
      EXIT('api/CheckRegistration');
    END;

    LOCAL PROCEDURE GetAppRegParameters@86405() Params : Text;
    BEGIN
      Params := '?tenantid=%1&appid=%2&companyname=%3&numberusers=%4&isevaluationcompany=%5';
      Params := STRSUBSTNO(Params,GetTenantId,CurrentAppId,GetEncodedCompanyName,GetNumberOfActiveUsers,FORMAT(IsEvaluationCompany,0,2));
    END;

    LOCAL PROCEDURE GetTenantId@86406() : Text;
    VAR
      Url@90000 : Text;
      Uri@90001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      Url := GETURL(CLIENTTYPE::Web);
      Uri := Uri.Uri(Url);
      EXIT(Uri.Host);
    END;

    LOCAL PROCEDURE GetEncodedCompanyName@86407() : Text;
    VAR
      SystemWebHttpUtility@50000 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      EXIT(SystemWebHttpUtility.UrlEncode(COMPANYNAME));
    END;

    LOCAL PROCEDURE GetNumberOfActiveUsers@86408() : Integer;
    VAR
      UserRec@90000 : Record 2000000120;
    BEGIN
      UserRec.SETRANGE(State,UserRec.State::Enabled);
      UserRec.SETFILTER("License Type",'%1|%2',UserRec."License Type"::"Full User",UserRec."License Type"::"Limited User");
      EXIT(UserRec.COUNT);
    END;

    LOCAL PROCEDURE IsEvaluationCompany@86409() : Boolean;
    VAR
      Company@86400 : Record 2000000006;
    BEGIN
      Company.GET(COMPANYNAME);
      EXIT(Company."Evaluation Company");
    END;

    LOCAL PROCEDURE HandleNotificationOnCheck@86410(AppID@86404 : GUID;NotificationMsg@86403 : Text;NotificationActionText@86400 : Text;RedirectUrl@86402 : Text);
    VAR
      REGShowPermissionNotification@86401 : Codeunit 86403;
    BEGIN
      REGShowPermissionNotification.ShowPermissionsNotification(AppID, NotificationMsg,NotificationActionText,RedirectUrl);
    END;

    BEGIN
    END.
  }
}

